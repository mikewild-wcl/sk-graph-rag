@page "/movies"
@rendermode InteractiveServer
@inject SK.GraphRag.Application.Services.Interfaces.IMoviesGraphQueryService MoviesService
@inject MoviesState MoviesState

<PageTitle>Movies</PageTitle>

<h3>Find Movies by Actor</h3>

<div class="movie-search">
    <label for="actor">Actor Name:</label>
    <input id="actor" @bind="actorName" @bind:event="oninput" @onkeydown="HandleKeyDown" />
    <button @onclick="SearchAsync" disabled="@isLoading">Search</button>
    @if (MoviesState.HasSearched && MoviesState.Movies.Count > 0)
    {
        <button class="btn btn-link" @onclick="ClearAsync">Clear</button>
    }
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (MoviesState.HasSearched && MoviesState.Movies.Count == 0)
{
    <p>No movies found for '@actorName'.</p>
}
else if (MoviesState.Movies.Count > 0)
{
    <ul>
        @foreach (var movie in MoviesState.Movies)
        {
            <li>@movie</li>
        }
    </ul>
}

@code {
    private string actorName = string.Empty;
    private bool isLoading;

    protected override void OnInitialized()
    {
        if (MoviesState.HasSearched)
        {
            actorName = MoviesState.LastActorName;
        }
    }

    private async Task SearchAsync()
    {
        if (string.IsNullOrWhiteSpace(actorName))
        {
            MoviesState.Clear();
            return;
        }

        isLoading = true;
        try
        {
            var results = await MoviesService.GetMoviesForActor(actorName);
            MoviesState.SetResults(actorName, results);
        }
        finally
        {
            isLoading = false;
        }
    }

    private Task ClearAsync()
    {
        MoviesState.Clear();
        actorName = string.Empty;
        return Task.CompletedTask;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchAsync();
        }
    }
}
