#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Load movies into Neo4j

Requires a running Neo4j instance

Movies cypher file taken from https://github.com/neo4j-graph-examples/movies/blob/main/scripts/movies.cypher

#!csharp

#r "nuget:Microsoft.Extensions.Configuration, 9.0.9"
#r "nuget:Microsoft.Extensions.Configuration.Json, 9.0.7"
#r "nuget:Neo4j.Driver, 5.28.3"
#r "nuget:System.Net.Http, 4.3.4"

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Json;
using Neo4j.Driver;
using System.IO;

#!csharp

const string DB_NAME = "neo4j"; // Default database name in Neo4j
var _clearGraphDB = false; // Set to true to clear the graph database before loading data

//Get configuration
var config = new ConfigurationBuilder()
    .AddJsonFile(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json"))
    .AddJsonFile(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.Development.json"), optional: true)
    .Build();

var user = config["Neo4j:User"];
var password = config["Neo4j:Password"];
var connectionUri = config["Neo4j:Connection"];

$"Neo4j details: Connection: {connectionUri}; auth user: {user}/{password}"

#!csharp

// Create driver
var driver = GraphDatabase.Driver(connectionUri, AuthTokens.Basic(user, password));
await driver.VerifyConnectivityAsync();
Console.WriteLine("Connection established.");

#!pwsh

# Copy the cypher file into the Docker container
docker cp "C:\dev_mike\sk-graph-rag\cypher\movies-graphrag-book-download.cypher" neo4j:/import

#!csharp

try
{
    var cypherFilePath = "/import/movies-graphrag-book-download.cypher";

    using (var session = driver.AsyncSession())
    {
        if (_clearGraphDB)
        {
            await session.ExecuteWriteAsync(async tx =>
            {
                // Delete all nodes and relationships.
                // See https://stackoverflow.com/questions/22357379/neo4j-how-to-drop-all-constraints
                await tx.RunAsync("MATCH (n) DETACH DELETE n");
                Console.WriteLine("Deleted all nodes.");
            });

            await session.ExecuteWriteAsync(async tx =>
            {
                Console.WriteLine("Deleting indexes.");
                await tx.RunAsync("CALL apoc.schema.assert({},{},true) YIELD label, key RETURN *");
                Console.WriteLine("Deleted all indexes and constraints.");
            });
        }
        
        await session.ExecuteWriteAsync(async tx =>
        {
            Console.WriteLine("running commands.");
            //await tx.RunAsync(@"CALL apoc.cypher.runFile('C:\dev_mike\sk-graph-rag\cypher\zzmovies-graphrag-book original.cypher');");
            await tx.RunAsync($"CALL apoc.cypher.runFile('{cypherFilePath}');");
            Console.WriteLine("Ran commands from cypher file.");
        });

        await session.ExecuteWriteAsync(async tx =>
        {
            Console.WriteLine("Adding index.");
            await tx.RunAsync("CREATE INDEX FOR (m:Movie) ON (m.released)");
        });
        Console.WriteLine("Created indexes.");
    }
}
catch (Exception ex)
{
    Console.WriteLine($"Error during query execution: {ex.Message}");
}

#!csharp

// try
// {
//     //var cypherFilePath = Path.Combine(Directory.GetCurrentDirectory(), @"..\cypher", "movies.cypher");
//     var cypherFilePath = @"..\cypher\movies-graphrag-book.cypher";

//     Console.WriteLine($"Looking for cypher file at: {cypherFilePath}");
//     if (!File.Exists(cypherFilePath))
//     {
//         throw new FileNotFoundException($"Cypher file not found: {cypherFilePath}");
//     }
    
//     Console.WriteLine($"Cypher file found: {cypherFilePath}");

//     using (var session = driver.AsyncSession())
//     {
//         await session.ExecuteWriteAsync(async tx =>
//         {
//             // Delete all nodes and relationships.
//             // See https://stackoverflow.com/questions/22357379/neo4j-how-to-drop-all-constraints
//             await tx.RunAsync("MATCH (n) DETACH DELETE n");
//             Console.WriteLine("Deleted all nodes.");
//         });

//         await session.ExecuteWriteAsync(async tx =>
//         {
//             await tx.RunAsync("CALL apoc.schema.assert({},{},true) YIELD label, key RETURN *");
//             Console.WriteLine("Deleted all indexes and constraints.");
//         });

//         // Add sample data.
//         using var fileStream = new FileStream(cypherFilePath, FileMode.Open, FileAccess.Read);
//         using var reader = new StreamReader(fileStream, System.Text.Encoding.UTF8, true);
        
//         await session.ExecuteWriteAsync(async tx =>
//         {
//             string line = null;
//             while ((line = reader.ReadLine()) != null)
//             {
//                 if(line.Length == 0) continue;
//                 if (line.StartsWith("CREATE CONSTRAINT", StringComparison.OrdinalIgnoreCase)) continue;

//                 if(line.Length == 0 ||
//                 //     string.IsNullOrWhiteSpace(line) ||
//                 //     line.StartsWith("CREATE CONSTRAINT", StringComparison.OrdinalIgnoreCase) ||
//                      line.StartsWith("MATCH", StringComparison.OrdinalIgnoreCase))
//                 {
//                     continue;
//                 }

//                 //TODO: If whole line is just CREATE - start a new command
//                 //      If has comaand and EndsWith , append 
//                 //      If has command and has no end comma, run the command and clear command

//                 Console.WriteLine(line);
//                 await tx.RunAsync(line);
//             }

//             Console.WriteLine("Ran commands from cypher file.");
//         });

//         // await session.ExecuteWriteAsync(async tx =>
//         // {
//         //     // Create sample data.
//         //     // Add constraints - not needed if using apoc to load file
//         //     await tx.RunAsync("CREATE CONSTRAINT FOR (n:Movie) REQUIRE (n.title) IS UNIQUE");
//         //     await tx.RunAsync("CREATE CONSTRAINT FOR (n:Person) REQUIRE (n.name) IS UNIQUE");
//         //     Console.WriteLine("Created constraints.");
//         // });

//         // Add index.
//         await session.ExecuteWriteAsync(async tx =>
//         {
//             await tx.RunAsync("CREATE INDEX FOR (m:Movie) ON (m.released)");
//         });
//         Console.WriteLine("Created indexes.");
//     }
// }
// catch (Exception ex)
// {
//     Console.WriteLine($"Error during query execution: {ex.Message}");
// }

#!csharp

// Cleanup
await driver.DisposeAsync();
