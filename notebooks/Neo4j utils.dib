#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Neo4j utils

Contains some helpers for Neo4j, including code to clear data

#!csharp

#r "nuget:Microsoft.Extensions.Configuration, 9.0.9"
#r "nuget:Microsoft.Extensions.Configuration.Json, 9.0.7"
#r "nuget:Neo4j.Driver, 5.28.3"

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Json;
using Neo4j.Driver;
using System.IO;

#!csharp

//Get configuration
var config = new ConfigurationBuilder()
    .AddJsonFile(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json"))
    .AddJsonFile(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.Development.json"), optional: true)
    .Build();

var user = config["Neo4j:User"];
var password = config["Neo4j:Password"];
var connectionUri = config["Neo4j:Connection"];

Console.WriteLine($"Neo4j details: Connection: {connectionUri}, auth user: {user}/{password}");

#!csharp

// Create driver and database
// var driver = GraphDatabase.Driver(connection, AuthTokens.Basic(user, password));
// var session = driver.AsyncSession();
var driver = GraphDatabase.Driver(connectionUri, AuthTokens.Basic(user, password));
await driver.VerifyConnectivityAsync();
Console.WriteLine("Connection established.");

#!csharp

// Clear all data
using (var session = driver.AsyncSession())
{
    await session.ExecuteWriteAsync(async tx =>
    {
        // Delete all nodes and relationships.
        await tx.RunAsync("MATCH (n) DETACH DELETE n");
        Console.WriteLine("Deleted all nodes and relationships.");
    });

    await session.ExecuteWriteAsync(async tx =>
    {
        // All indexes and constraints.
        await tx.RunAsync("CALL apoc.schema.assert({},{},true) YIELD label, key RETURN *");
        Console.WriteLine("Deleted all indexes and constraints.");
    });
}

#!csharp

// Cleanup
await driver.DisposeAsync();
