#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Neo4j vectors

A simple demo of vectors based on chapter 2 of Essential GraphRAG. The original notebokk is https://github.com/tomasonjo/kg-rag/blob/main/notebooks/ch02.ipynb

#!csharp

#r "nuget: Microsoft.Extensions.Configuration, 9.0.9"
#r "nuget: Microsoft.Extensions.Configuration.Json, 9.0.7"
#r "nuget: PdfPig, 0.1.11"
#r "nuget:Neo4j.Driver, 5.28.3"
#r "nuget: System.Net.Http, 4.3.4"

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Json;
using Neo4j.Driver;
using System.Net.Http;
using System.IO;

#!csharp

//Get configuration
var config = new ConfigurationBuilder()
    .AddJsonFile(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.json"))
    .AddJsonFile(Path.Combine(Directory.GetCurrentDirectory(), "appsettings.Development.json"), optional: true)
    .Build();

var user = config["Neo4j:User"];
var password = config["Neo4j:Password"];
var connectionUri = config["Neo4j:Connection"];

Console.WriteLine($"Neo4j details: Connection: {connectionUri}, auth user: {user}/{password}");

#!csharp

// Create driver and database
// var driver = GraphDatabase.Driver(connection, AuthTokens.Basic(user, password));
// var session = driver.AsyncSession();
var driver = GraphDatabase.Driver(connectionUri, AuthTokens.Basic(user, password));
await driver.VerifyConnectivityAsync();
Console.WriteLine("Connection established.");

#!csharp

// Create the http client
var httpClient = new HttpClient();

#!csharp

// Read the input file from the web and save it in a local folder

var downloadDir = "downloads";
var fileName = "Einsteinâ€™s Patents and Inventions.pdf";
var filePath = Path.Combine(downloadDir, fileName);
var fileUri = new Uri("https://arxiv.org/pdf/1709.00666.pdf");

// var response = requests.get(remote_pdf_url)

if (!Directory.Exists(downloadDir))
{
    Directory.CreateDirectory(downloadDir);
}

if(File.Exists(filePath))
{
    Console.WriteLine($"The file {fileName} already exists in {downloadDir}");
}
else
{
    using(var response = await httpClient.GetAsync(fileUri, HttpCompletionOption.ResponseHeadersRead))
    {
        if(response.IsSuccessStatusCode)
        {
            using (var stream = await response.Content.ReadAsStreamAsync())
            using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))
            {
                await stream.CopyToAsync(fileStream);
                await fileStream.FlushAsync();
                Console.WriteLine($"Downloaded the PDF to {filePath}");
            }
        }
        else {
            Console.WriteLine("Failed to download the PDF. Status code:", response.StatusCode); 
        }
    }
} 

#!markdown

// Use PDFPig to extract data for chunking
using UglyToad.PdfPig;
using UglyToad.PdfPig.Content;
using UglyToad.PdfPig.DocumentLayoutAnalysis.PageSegmenter;
using UglyToad.PdfPig.DocumentLayoutAnalysis.WordExtractor;

using(var pdf = PdfDocument.Open(Path.Combine(sourceDirectory, document.DocumentId)))
{

}

#!csharp

//Can't do this because the Community edition only allows one database
/*
using (var session = driver.AsyncSession(s => s.WithDatabase("system")))
{
    await session.ExecuteWriteAsync(async tx =>
    {
        // Create database if it does not exist
        await tx.RunAsync("CREATE DATABASE my_database IF NOT EXISTS");
    });
}
*/

#!csharp

//Can't do this because the Community edition only allows one database
/*
const string dbName = "testDatabase";

using(var session = driver.AsyncSession())
{
    try
    {
        // Check if the database already exists
        var checkDbResult = await session.ExecuteReadAsync(async tx =>
        {
            var result = await tx.RunAsync("SHOW DATABASES")
            return await result.ToListAsync();
        });

        bool dbExists = checkDbResult.Any(record => record["name"].As<string>() == dbName);

        if (dbExists)
        {
            Console.WriteLine($"Database '{dbName}' already exists.");
        }
        else
        {        
            Console.WriteLine($"Database '{dbName}' does not exist. Proceeding to create it.");
            var createDatabaseQuery = $"CREATE DATABASE {dbName}";

            await session.ExecuteWriteAsync(async tx =>
            {
                await tx.RunAsync(createDatabaseQuery);
            });

            Console.WriteLine("Database 'myDatabase' created successfully!");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"An error occurred: {ex.Message}");
    }
}
*/

#!csharp

// Cleanup
await driver.DisposeAsync();
